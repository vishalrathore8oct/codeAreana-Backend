generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String    @id @default(uuid())
  fullName                     String?
  userName                     String    @unique
  email                        String    @unique
  password                     String
  avatarImage                  String    @default("https://img.freepik.com/free-vector/smiling-young-man-illustration_1308-174669.jpg")
  role                         UserRole  @default(USER)
  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?   @unique
  emailVerificationTokenExpiry DateTime?
  passwordResetToken           String?   @unique
  passwordResetTokenExpiry     DateTime?
  refreshToken                 String?   @unique
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  problems      Problem[]
  Submission    Submission[]
  problemSolved problemSolved[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  hints              String[]
  examples           Json
  constraints        String[]
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  Submission    Submission[]
  problemSolved problemSolved[]
}

model Submission {
  id            String   @id @default(uuid())
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcaseResults TestcaseResult[]
}

model TestcaseResult {
  id             String   @id @default(uuid())
  testcase       Int
  passed         Boolean
  stdin          String?
  stdout         String?
  expectedOutput String?
  stderr         String?
  compileOutput  String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
